name: SonarQube
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          Write-Host "Starting SonarQube analysis..."
          # Iniciar el análisis de SonarQube (ya estamos en la raíz donde está el .sln)
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"JorgeAndres-GitHub_SURA-Proyect" /o:"jorgeandres-github" `
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
          /d:sonar.host.url="https://sonarcloud.io" `
          /d:sonar.cs.opencover.reportsPaths="TestSURAConcept/**/coverage.opencover.xml" `
          /d:sonar.scanner.scanAll=false
          
          # Restaurar dependencias y compilar
          dotnet restore
          dotnet build --no-restore SURAConcept.sln
          Write-Host "Build completed. Running tests with coverage..."
          # Ejecutar pruebas unitarias con cobertura de código
          dotnet test TestSURAConcept/TestSURAConcept.csproj --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=coverage.opencover.xml
          Write-Host "Checking if coverage.opencover.xml was generated..."
          # Verificar si el archivo de cobertura existe
          if (Test-Path "TestSURAConcept/coverage.opencover.xml") {
            Write-Host "Coverage file found. Proceeding with SonarQube analysis..."
          } else {
            Write-Host "ERROR: coverage.opencover.xml not found. Exiting..."
            exit 1
          }
          # Finalizar análisis de SonarQube
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          Write-Host "SonarQube analysis completed successfully."
