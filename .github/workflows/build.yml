name: SonarQube
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      
      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory -Force
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      
      - name: Build, test and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          
          [System.Console]::WriteLine("üöÄ Starting SonarQube analysis from repository root...")
          
          $scanner = ".\.sonar\scanner\dotnet-sonarscanner"
          
          # Begin SonarQube analysis
          [System.Console]::WriteLine("üìã Starting SonarScanner begin...")
          & $scanner begin `
            /k:"TU_PROYECTO_SONARCLOUD" `
            /o:"TU_ORGANIZACION_SONARCLOUD" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"
          
          if ($LASTEXITCODE -ne 0) {
            [System.Console]::WriteLine("‚ùå SonarScanner begin failed with exit code: $LASTEXITCODE")
            exit $LASTEXITCODE
          }
          
          # Restore dependencies
          [System.Console]::WriteLine("üì¶ Restoring dependencies...")
          dotnet restore SURAConcept.sln
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
          
          # Build solution
          [System.Console]::WriteLine("üî® Building solution...")
          dotnet build SURAConcept.sln --no-restore --configuration Release
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
          
          # Run tests with coverage
          [System.Console]::WriteLine("üß™ Running tests with coverage...")
          dotnet test TestSURAConcept/TestSURAConcept.csproj `
            --no-build `
            --configuration Release `
            --verbosity normal `
            /p:CollectCoverage=true `
            /p:CoverletOutputFormat=opencover `
            /p:CoverletOutput=./coverage.opencover.xml
          
          if ($LASTEXITCODE -ne 0) { 
            [System.Console]::WriteLine("‚ö†Ô∏è Tests failed but continuing with analysis...")
          }
          
          # Verify coverage file exists
          if (Test-Path "TestSURAConcept/coverage.opencover.xml") {
            [System.Console]::WriteLine("‚úÖ Coverage file found at: TestSURAConcept/coverage.opencover.xml")
          } else {
            [System.Console]::WriteLine("‚ö†Ô∏è Coverage file not found, analysis will continue without coverage data")
          }
          
          # End SonarQube analysis
          [System.Console]::WriteLine("üìä Ending SonarScanner analysis...")
          & $scanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          
          if ($LASTEXITCODE -ne 0) {
            [System.Console]::WriteLine("‚ùå SonarScanner end failed with exit code: $LASTEXITCODE")
            exit $LASTEXITCODE
          }
          
          [System.Console]::WriteLine("üéØ SonarQube analysis completed successfully.")
