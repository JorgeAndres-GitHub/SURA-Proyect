name: SonarQube

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Build, test and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          [System.Console]::WriteLine("üöÄ Starting SonarQube analysis from repository root...")

          # Ejecutar todo desde el directorio ra√≠z (donde est√° el .sln)
          $scanner = ".\.sonar\scanner\dotnet-sonarscanner"

          & $scanner begin `
            /k:"TU_PROYECTO_SONARCLOUD" `
            /o:"TU_ORGANIZACION_SONARCLOUD" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cs.opencover.reportsPaths="TestSURAConcept/**/coverage.opencover.xml" `
            /d:sonar.scanner.scanAll=false

          dotnet restore
          dotnet build --no-restore SURAConcept.sln

          [System.Console]::WriteLine("üß™ Running tests with coverage...")
          dotnet test TestSURAConcept/TestSURAConcept.csproj --no-build --verbosity normal `
            /p:CollectCoverage=true `
            /p:CoverletOutputFormat=opencover `
            /p:CoverletOutput=coverage.opencover.xml

          if (Test-Path "TestSURAConcept/coverage.opencover.xml") {
            [System.Console]::WriteLine("‚úÖ Coverage file found.")
          } else {
            [System.Console]::WriteLine("‚ùå coverage.opencover.xml not found, exiting...")
            exit 1
          }

          & $scanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          [System.Console]::WriteLine("üéØ SonarQube analysis completed successfully.")
