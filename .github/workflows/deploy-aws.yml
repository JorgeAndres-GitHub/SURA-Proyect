name: Deploy to AWS ECS

on:
  workflow_run:
    workflows: ["Build and Push Docker Image"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="docker_image=${{ secrets.DOCKERHUB_USERNAME }}/sura-proyect" \
            -var="docker_tag=latest" \
            -var="aws_region=${{ secrets.AWS_REGION }}" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      - name: Get Service Info
        working-directory: ./terraform
        run: |
          echo "üöÄ Deployment completed!"
          echo "Cluster: $(terraform output -raw cluster_name)"
          echo "Service: $(terraform output -raw service_name)"
          echo "Task Definition: $(terraform output -raw task_definition)"
          echo ""
          echo "üìã Para ver logs:"
          echo "aws logs tail $(terraform output -raw log_group) --follow"

      - name: Get Task Public IP
        run: |
          echo "üîç Obteniendo IP p√∫blica del contenedor..."
          
          CLUSTER=$(cd terraform && terraform output -raw cluster_name)
          SERVICE=$(cd terraform && terraform output -raw service_name)
          
          # Obtener ARN de la tarea
          TASK_ARN=$(aws ecs list-tasks \
            --cluster $CLUSTER \
            --service-name $SERVICE \
            --desired-status RUNNING \
            --query 'taskArns[0]' \
            --output text)
          
          if [ "$TASK_ARN" != "None" ] && [ ! -z "$TASK_ARN" ]; then
            # Obtener detalles de la tarea
            TASK_DETAILS=$(aws ecs describe-tasks \
              --cluster $CLUSTER \
              --tasks $TASK_ARN)
            
            # Extraer ENI
            ENI=$(echo $TASK_DETAILS | jq -r '.tasks[0].attachments[0].details[] | select(.name=="networkInterfaceId") | .value')
            
            # Obtener IP p√∫blica
            PUBLIC_IP=$(aws ec2 describe-network-interfaces \
              --network-interface-ids $ENI \
              --query 'NetworkInterfaces[0].Association.PublicIp' \
              --output text)
            
            echo "‚úÖ API disponible en: http://$PUBLIC_IP:8080"
            echo "üè• Health check: http://$PUBLIC_IP:8080/health"
          else
            echo "‚ö†Ô∏è No se encontr√≥ una tarea en ejecuci√≥n a√∫n. Espera unos minutos."
          fi
